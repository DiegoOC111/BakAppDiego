@using BakAppDiego.Components.Globals.Modelos.Bakapp
@code {
    private TaskCompletionSource<string> tcs;
    private TaskCompletionSource<double?> tcs2;
    public bool Numeric;
    public bool Long;
    private double Numero { get; set; } = 0;
    private string advertencia = "";
    [Parameter]
    public bool IsVisible { get; set; } = false;

    [Parameter]
    public string mensaje { get; set; } = "";

    [Parameter]
    public string titulo { get; set; } = "";

    [Parameter]
    public string BotonStringAceptar { get; set; } = "Aceptar";

    [Parameter]
    public string BotonStringCancelar { get; set; } = "Cancelar";

    [Parameter]
    public bool BotonBoolCancelar { get; set; } = true;

    private string inputText = "";  // Variable para almacenar el texto del input

    // Método para mostrar el popup
    public Task<string> ShowAsync()
    {
        tcs = new TaskCompletionSource<string>();
        IsVisible = true;
        StateHasChanged();
        return tcs.Task;
    }
    public Task<double?> ShowAsynNumeric()
    {
        tcs2 = new TaskCompletionSource<double?>();
        IsVisible = true;
        StateHasChanged();
        return tcs2.Task;
    }

    // Método para configurar el popup
    public void Crear(string Titulo, string Mensaje, string aceptar, string cancelar, bool visibleBTN2)
    {
        Numeric = false;
        titulo = Titulo;
        mensaje = Mensaje;
        BotonStringAceptar = aceptar;
        BotonStringCancelar = cancelar;
        BotonBoolCancelar = visibleBTN2;
        inputText = ""; // Reiniciar el texto del input
        advertencia = "";
        Numero = 0;
        StateHasChanged();
        Long = false;
    }
    public void CrearLong(string Titulo, string Mensaje, string aceptar, string cancelar, bool visibleBTN2, string comentario)
    {
        Numeric = false;
        titulo = Titulo;
        mensaje = Mensaje;
        BotonStringAceptar = aceptar;
        BotonStringCancelar = cancelar;
        BotonBoolCancelar = visibleBTN2;
        inputText = comentario; // Reiniciar el texto del input
        advertencia = "";
        Numero = 0;
        StateHasChanged();
        Long = true;
    }
    public void Crear(string Titulo, string Mensaje, string aceptar, string cancelar, bool visibleBTN2, bool Num,double defa)
    {
        Numeric = Num;
     
        titulo = Titulo;
        mensaje = Mensaje;
        BotonStringAceptar = aceptar;
        BotonStringCancelar = cancelar;
        BotonBoolCancelar = visibleBTN2;
        inputText = ""; // Reiniciar el texto del input
        advertencia = "";
        Numero = defa;
        
        StateHasChanged();
    }
    // Lógica cuando se presiona "Aceptar"
    public void Aceptar()
    {
        if (Numeric)
        {
            if (Numero == 0)
            {
                advertencia = "La cantidad no puede ser 0. Por favor, ingrese un valor válido.";
                StateHasChanged();
                return;
            }


            tcs2.SetResult(Numero);
            IsVisible = false;
            StateHasChanged();
            return;


        }
        tcs?.SetResult(inputText);
        IsVisible = false;
        StateHasChanged();
        return;
    }

    // Lógica cuando se presiona "Cancelar"
    public void Cancelar()
    {
        if (Numeric)

        {

            tcs2?.SetResult(null);
            IsVisible = false;
            StateHasChanged();
            return;

        }
        else
        {
            tcs?.SetResult(null);
            IsVisible = false;
            StateHasChanged();
            return;
        }
        
    }



    // Método para confirmar la entrada de texto al presionar Enter
    private void ConfirmarInputText()
    {
        // Aquí puedes manejar el texto ingresado o pasarlo a otra lógica
        Console.WriteLine($"Texto ingresado: {inputText}");
        Aceptar();
    }
}
@if (IsVisible)
{
    <div class="loading-popup">
        <div class="overlay">
            <div class="popup-content">
                <h3>@titulo</h3>
                <p>@mensaje</p>
                @if (Numeric)
                {
                    @if (!string.IsNullOrEmpty(advertencia))
                    {
                        <div class="alert alert-danger">
                            @advertencia
                        </div>

                    }

                    <input type="number" class="form-control" @bind="Numero" placeholder="0" />


                }
                else

                {
                    @if (Long  == false)
                    {
                        <input type="text" class="text-input" @bind="inputText" @onkeypress="@(e => { if (e.Key == "Enter") ConfirmarInputText(); })" />
                    }
                    else
                    {

                        <textarea class="text-area" @bind="inputText"
                                  @onkeypress="@(e => { if (e.Key == "Enter") ConfirmarInputText(); })"
                                  rows="5" cols="50"></textarea>
                        
                    
                    }
                
                }
                

                <div class="popup-buttons">

                    @if (BotonBoolCancelar)
                    {
                        <button class="button-19 " @onclick="Aceptar">@BotonStringAceptar</button>
                        <button class="button-19 " @onclick="Aceptar">@BotonStringCancelar</button>
                    }
                </div>
            </div>
        </div>
    </div>
}