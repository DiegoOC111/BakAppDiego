@using BakAppDiego.Components.Globals.Modelos.Bakapp

@code {
    private TaskCompletionSource<Zw_Inv_Contador> tcs; // Manejo de tareas asíncronas
    public ls_Zw_Inv_Contador cont;

    [Parameter]
    public bool IsVisible { get; set; } = false;

    [Parameter]
    public string mensaje { get; set; } = "";

    [Parameter]
    public string titulo { get; set; } = "";

    [Parameter]
    public string BotonStringAceptar { get; set; } = "Aceptar";

    [Parameter]
    public string BotonStringCancelar { get; set; } = "Cancelar";

    [Parameter]
    public bool BotonBoolCancelar { get; set; } = true;

    // Método para mostrar el popup
    public Task<Zw_Inv_Contador> ShowAsync()
    {
        tcs = new TaskCompletionSource<Zw_Inv_Contador>();
        IsVisible = true;
        StateHasChanged();
        return tcs.Task;
    }

    // Método para configurar el popup
    public void Crear(string Titulo, string Mensaje, string aceptar, string cancelar, bool visibleBTN2, ls_Zw_Inv_Contador contadores)
    {
        titulo = Titulo;
        mensaje = Mensaje;
        BotonStringAceptar = aceptar;
        BotonStringCancelar = cancelar;
        BotonBoolCancelar = visibleBTN2;
        cont = contadores;
        StateHasChanged();
    }

    // Lógica cuando se presiona "Aceptar"
    public void Aceptar()
    {
        tcs?.SetResult(null);
        IsVisible = false;
        StateHasChanged();
    }

    // Lógica cuando se presiona "Cancelar"
    public void Cancelar()
    {
        tcs?.SetResult(null);
        IsVisible = false;
        StateHasChanged();
    }

    // Lógica cuando se selecciona un contador
    public void SeleccionarContador(Zw_Inv_Contador contador)
    {
        tcs?.SetResult(contador);
        IsVisible = false;
        StateHasChanged();
    }
}

@if (IsVisible)
{
    <div class="loading-popup">
        <div class="overlay">
            <div class="popup-content">
                
                <p>@mensaje</p>
                <div class="container" style="background-color: transparent;">
                    <div class="row flex-column align-items-center g-3" style="background-color: transparent;">
                        <div class="col-md-12">
                            <div class="card bg-transparent border-0">
                                <div class="card-body text-center">
                                    <h1 class="display-5" style="color: #012E4A;">@titulo</h1>
                                </div>
                            </div>
                        </div>

                        @foreach (var contador in cont.Table)
                        {
                             <div class="col-12" @onclick="() => SeleccionarContador(contador)">
            <div class="card text-bg-primary h-100" style="--bs-card-border-color: #036280;">
                                    <div class="card-header" style="background-color: #81BECE;">@contador.Nombre</div>
                <div class="card-body" style="background-color: #81BECE;">
                    <h5 class="card-title">Rut: @contador.Rut</h5>
                </div>
            </div>
        </div>
                        }
                    </div>
                </div>

                <div class="popup-buttons text-center">
                    @if (BotonBoolCancelar)
                    {
                        <button class="button-19" @onclick="Aceptar">@BotonStringAceptar</button>
                    }
                    
                </div>
            </div>
        </div>
    </div>
}