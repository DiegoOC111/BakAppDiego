@using BakAppDiego.Components.Globals.Modelos.Bakapp

@code {
    private TaskCompletionSource<Contador> tcs;  // Cambiar a Contador
    public ContadorResponse cont; 
    [Parameter]
    public bool IsVisible { get; set; } = false;

    [Parameter]
    public string mensaje { get; set; } = "";

    [Parameter]
    public string titulo { get; set; } = "";

    [Parameter]
    public string BotonStringAceptar { get; set; } = "Aceptar";

    [Parameter]
    public string BotonStringCancelar { get; set; } = "Cancelar";

    [Parameter]
    public bool BotonBoolCancelar { get; set; } = true;

    // Método para mostrar el popup
    public Task<Contador> ShowAsync()
    {
        tcs = new TaskCompletionSource<Contador>();  // Cambio aquí a Contador
        IsVisible = true;
        StateHasChanged();
        return tcs.Task;  // Devuelve una tarea que se completará cuando el popup se cierre
    }

    // Método para configurar el popup
    public void Crear(string Titulo, string Mensaje, string aceptar, string cancelar, bool visibleBTN2, ContadorResponse contadores)
    {
        titulo = Titulo;
        mensaje = Mensaje;
        BotonStringAceptar = aceptar;
        BotonStringCancelar = cancelar;
        BotonBoolCancelar = visibleBTN2;
        cont = contadores;
        StateHasChanged();
    }

    // Lógica cuando se presiona "Aceptar"
    public void Aceptar()
    {
        tcs?.SetResult(null);  // Retorna null si el usuario cancela
        IsVisible = false;
        StateHasChanged();
    }

    // Lógica cuando se presiona "Cancelar"
    public void Cancelar()
    {
        // Si necesitas devolver un Contador vacío o nulo, puedes hacerlo
        tcs?.SetResult(null);  // Retorna null si el usuario cancela
        IsVisible = false;
        StateHasChanged();
    }
    public void SeleccionarContador(Contador contador)
    {
        // Configura el contador seleccionado para usarlo más adelante
        tcs?.SetResult(contador);  // Devuelve el contador seleccionado
        IsVisible = false; // Cierra el popup si es necesario
        StateHasChanged();
    }
}
@if (IsVisible)
{
    <div class="loading-popup">
        <div class="overlay">
            <div class="popup-content">
                <h3>@titulo</h3>
                <p>@mensaje</p>
                <table class="table-fill">
                    <tbody class="table-hover">
                        
                        
                     

                            @foreach (var contador in cont.Table)
                            {
                                <tr @onclick="() => SeleccionarContador(contador)">

                                <td class="text-left">Nombre: @contador.Nombre - @contador.Rut </td>
                                    
                                    
                                </tr>
                            }
                       
                    </tbody>
                </table>
                <div class="popup-buttons">
                    
                    @if (BotonBoolCancelar)
                    {
                        <button class="button-19 " @onclick="Aceptar">@BotonStringAceptar</button>
                    }
                </div>
            </div>
        </div>
    </div>
}